predicate Sll(loc x)
{
| x == 0 => { emp }
| not (x == 0) => { [x,2] **
                    x :-> head2 **
                    (x + 1) :-> nxt3 **
                    Sll(nxt3) }
}
predicate equal(loc x1, loc x, int b2)
{
| (x1 == 0) && (x == 0) => { b2 == 1;emp }
| ((not (x1 == 0)) && (not (x == 0))) => { b0 == (a == b ? 1 : 0) && b2 == b1 * b0;
                                                       [x1,2] **
                                                       [x,2] **
                                                       x1 :-> a **
                                                       (x1 + 1) :-> nxt17 **
                                                       x :-> b **
                                                       (x + 1) :-> nxt18 **
                                                       equal(nxt17, nxt18, b1) }

| (x1 == 0) && (not (x == 0)) => { b2 == 0;
                                   [x,2] **
                                   Sll(nxt51) **
                                   x :-> b **
                                   (x + 1) :-> nxt51}
| (not (x1 == 0)) && (x == 0) => { b2 == 0;
                                   [x1,2] **
                                   Sll(nxt62) **
                                   x1 :-> a **
                                   (x1 + 1) :-> nxt62}
}
// predicate equal(loc x1, loc x, loc b2)
// {
// | (x1 == 0) && (x == 0) => { [b2,1] ** b2 :-> 1 }
// | ((not (x1 == 0)) && (not (x == 0))) && (a == b) => { [b2,1] **
//                                                        [x1,2] **
//                                                        [x,2] **
//                                                        // Sll(nxt17) **
//                                                        // Sll(nxt18) **
//                                                        x1 :-> a **
//                                                        (x1 + 1) :-> nxt17 **
//                                                        x :-> b **
//                                                        (x + 1) :-> nxt18 **
//                                                        equal(nxt17, nxt18, b2) }
// | ((not (x1 == 0)) && (not (x == 0)))
//   &&
//   (not (a == b)) => { [b2,1] **
//                       [x1,2] **
//                       [x,2] **
//                       Sll(nxt35) **
//                       Sll(nxt36) **
//                       x1 :-> a **
//                       (x1 + 1) :-> nxt35 **
//                       x :-> b **
//                       (x + 1) :-> nxt36 **
//                       b2 :-> 0 }
// | (x1 == 0) && (not (x == 0)) => { [b2,1] **
//                                    [x,2] **
//                                    Sll(nxt51) **
//                                    x :-> b **
//                                    (x + 1) :-> nxt51 **
//                                    b2 :-> 0 }
// | (not (x1 == 0)) && (x == 0) => { [b2,1] **
//                                    [x1,2] **
//                                    Sll(nxt62) **
//                                    x1 :-> a **
//                                    (x1 + 1) :-> nxt62 **
//                                    b2 :-> 0 }
// }
void equal(loc x1, loc x, loc b2)
  {Sll(x1) ** Sll(x) ** b2 :-> b3}
  {equal(x1, x, b4) ** b2 :-> b4}
{ ?? }
