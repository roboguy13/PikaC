%generate sum
%generate sumPacked

-- Packed tree

data Tree := Tip | Bin Int Tree Tree;

SlowTree : layout[-x](Tree);
SlowTree [x] Tip := emp;
SlowTree [x] (Bin i a b) :=
  exists +left, +right.
  x :-> i **
  (x+1) :-> left **
  (x+2) :-> right **
  SlowTree [left] a **
  SlowTree [right] b;

-- 'synthlayout' tells us that SuSLik should synthesize functions
-- that transform SlowTree into PackedTree and visa-versa. These can
-- then be implicitly used to write 'sumPacked' below.
PackedTree : synthlayout(SlowTree);
PackedTree [x, sz] Tip := sz == 0 ,, emp;
PackedTree [x, sz] (Bin i a b) :=
  sz == 1 + sz1 + sz2
    ,,
  x :-> i **
  PackedTree [x + 2, sz1] a **
  PackedTree [x + 2*(1 + sz1), sz2] b;

sum : (a :~ Tree) => a -> Int;
sum Tip := 0;
sum (Bin n p q) :=
  n + sum p + sum q;

sumPacked : PackedTree -> Int;
sumPacked = sum [PackedTree];

