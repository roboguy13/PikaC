%generate findMin
%generate testHeap
%generate merge
%generate mergePairs_helper
%generate mergePairs
%generate deleteMin
%generate forestCopy
%generate forestBelowMin
%generate insert

Sll : @(s : set) layout[-x](List);
Sll LNil := s == {} ;; emp;
Sll (LCons h t) :=
  exists +nxt.
  s == ({h} ++ s1)
    ;;
  x :-> h **
  (x+1) :-> nxt **
  Sll t @s1 [nxt];

HeapLayout : @(s : set) @(i : int) layout[-x](Heap);
HeapLayout Empty := ((s == {}) && (i == 10000000)) ;; emp;
HeapLayout (Node a as) :=
  exists +nxt.
  ((s == ({a} ++ s1))
    &&
  (a <= i1))
    &&
  (i == a)
    ;;
  x :-> a **
  (x+1) :-> nxt **
  ForestLayout as @s1 @i1 [nxt];

ForestLayout : @(s : set) @(i : int) layout[-x](Forest);
ForestLayout Nil := (s == {}) && (i == 10000000) ;; emp;
ForestLayout (Cons h t) :=
  exists +p, +nxt.
  (((s == (s1 ++ s2))
    &&
  (i <= i1))
    &&
  (i <= i2))
    &&
  (i == a)
    ;;
  x :-> p **
  (x+1) :-> nxt **
  HeapLayout h @s1 @i1 [p] **
  ForestLayout t @s2 @i2 [nxt];

  -- Unfortunately, SuSLik synthesizes something that violates the heap property here
-- synth forestToHeap : ((i < 10000000) && (j <= i)) ;; ForestLayout @s @i -> HeapLayout @s @j;

  -- This seems to require an additional variant which does not hold:
-- synth heapToSll : HeapLayout @s -> Sll @s;

-- synth forestToSll : ForestLayout @s -> Sll @s;

findMin : HeapLayout -> Int;
findMin (Node a as) := a;

merge : HeapLayout -> HeapLayout -> HeapLayout;
merge (Node a as) Empty := Node a as [HeapLayout];
merge Empty (Node a as) := Node a as [HeapLayout];
merge (Node a as) (Node b bs)
  | (a < b) :=
      Node a (Cons (Node b bs [HeapLayout]) as [ForestLayout]) [HeapLayout];
merge (Node a as) (Node b bs)
  | not (a < b) :=
      Node b (Cons (Node a as [HeapLayout]) bs [ForestLayout]) [HeapLayout];

insert : Int -> HeapLayout -> HeapLayout;
insert i Empty := merge (Node i (Nil [ForestLayout]) [HeapLayout]) (Empty [HeapLayout]);
insert i (Node a as) := merge (Node i (Nil [ForestLayout]) [HeapLayout]) (Node a as [HeapLayout]);

mergePairs_helper : HeapLayout -> ForestLayout -> HeapLayout;
mergePairs_helper Empty Nil := Empty [HeapLayout];
mergePairs_helper (Node a as) Nil := Node a as [HeapLayout];

mergePairs_helper Empty (Cons h2 hs) :=
  merge (merge (Empty [HeapLayout]) h2) (mergePairs hs);

mergePairs_helper (Node a as) (Cons h2 hs) :=
  merge (merge (Node a as [HeapLayout]) h2) (mergePairs hs);


mergePairs : ForestLayout -> HeapLayout;
mergePairs Nil := Empty [HeapLayout];
mergePairs (Cons h1 hs) :=
  mergePairs_helper h1 hs;
  
deleteMin : HeapLayout -> HeapLayout;
-- deleteMin (Node a as) := forestToHeap as;
deleteMin (Node a as) := mergePairs as;

forestCopy : ForestLayout -> ForestLayout;
forestCopy Nil := Nil [ForestLayout];
forestCopy (Cons a as) := Cons a as [ForestLayout];

forestBelowMin : HeapLayout -> ForestLayout;
forestBelowMin (Node a as) := forestCopy as; -- TODO: Find a way to fix the problem here so that we don't need this workaround

testHeap : HeapLayout -> HeapLayout;
testHeap Empty := Empty [HeapLayout];
testHeap (Node a as) := Node a as [HeapLayout];

%test "testHeap1" HeapLayout:
  testHeap
    (Node 1
      (Cons
        (Node 2
          (Nil [ForestLayout])
          [HeapLayout])
        (Nil [ForestLayout])
        [ForestLayout])
      [HeapLayout]);

%test "merge1" HeapLayout:
  merge
    (Node 20
      (Nil [ForestLayout])
      [HeapLayout])
    (Node 1
      (Cons
        (Node 2
          (Nil [ForestLayout])
          [HeapLayout])
        (Nil [ForestLayout])
        [ForestLayout])
      [HeapLayout]);

%test "insert1" HeapLayout:
  insert 5
    (Node 1
      (Cons
        (Node 2
          (Nil [ForestLayout])
          [HeapLayout])
        (Nil [ForestLayout])
        [ForestLayout])
      [HeapLayout]);

%test "deleteMin1" HeapLayout:
  deleteMin
    (insert 5
      (Node 1
        (Cons
          (Node 2
            (Nil [ForestLayout])
            [HeapLayout])
          (Nil [ForestLayout])
          [ForestLayout])
        [HeapLayout]));

-- %test "heapToSll" Sll:
--   heapToSll
--     (insert 5
--       (Node 1
--         (Cons
--           (Node 2
--             (Nil [ForestLayout])
--             [HeapLayout])
--           (Nil [ForestLayout])
--           [ForestLayout])
--         [HeapLayout]));

%test "forestBelowMin1" ForestLayout:
  forestBelowMin
    (insert 5
      (Node 1
        (Cons
          (Node 2
            (Nil [ForestLayout])
            [HeapLayout])
          (Nil [ForestLayout])
          [ForestLayout])
        [HeapLayout]));

-- TODO: Figure out why this crashes:

-- %test "forestBelowMin2" ForestLayout:
--   forestToSll
--     (forestBelowMin
--       (insert 5
--         (Node 1
--           (Cons
--             (Node 2
--               (Nil [ForestLayout])
--               [HeapLayout])
--             (Nil [ForestLayout])
--             [ForestLayout])
--           [HeapLayout])));

