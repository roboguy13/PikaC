%generate equal
%generate snoc
%generate reverse1
-- %generate reverse
-- %generate revcat
-- %generate reverse
-- %generate isAnagram

data List := Nil | Cons Int List;

Sll : layout[-x](List);
Sll Nil := emp;
Sll (Cons head tail) :=
  exists +nxt.
  x :-> head **
  (x+1) :-> nxt **
  Sll tail [nxt];

equal : Sll -> Sll -> Bool;
equal Nil Nil := True;
equal (Cons a as) (Cons b bs) := (a == b) && (equal as bs);
equal Nil (Cons b bs) := False;
equal (Cons a as) Nil := False;

snoc : Sll -> Int -> Sll;
snoc Nil i := Cons i (Nil [Sll]) [Sll];
snoc (Cons a as) i := Cons a (snoc as i) [Sll];

-- revcat : Sll -> Sll -> Sll;
-- revcat Nil Nil := Nil [Sll];
-- revcat Nil (Cons h t) := Cons h t [Sll];
-- revcat (Cons h t) Nil := revcat t (Cons h (Nil [Sll]) [Sll]);
-- revcat (Cons h1 t1) (Cons h2 t2) := revcat t1 (Cons h1 (Cons h2 t2 [Sll]) [Sll]);

reverse1 : Int -> Sll -> Sll;
reverse1 i Nil := Cons i (Nil [Sll]) [Sll];
reverse1 i (Cons a as) := snoc (reverse1 i as) a;

reverse : Sll -> Sll;
reverse Nil := Nil [Sll];
reverse (Cons h t) := snoc (reverse t) h;

isAnagram : Sll -> Bool;
isAnagram Nil := True;
isAnagram (Cons a as) := equal (Cons a as [Sll]) (reverse (Cons a as [Sll]));

%test "equal1" Bool: equal (Cons 1 (Cons 2 (Nil [Sll]) [Sll]) [Sll]) (Cons 2 (Cons 3 (Nil [Sll]) [Sll]) [Sll]);
%test "equal2" Bool: equal (Cons 1 (Cons 2 (Nil [Sll]) [Sll]) [Sll]) (Nil [Sll]);
%test "equal3" Bool: equal (Cons 2 (Cons 3 (Nil [Sll]) [Sll]) [Sll]) (Cons 2 (Cons 3 (Nil [Sll]) [Sll]) [Sll]);

-- %test "isAnagram1" Bool: isAnagram (Cons 1 (Cons 2 (Cons 1 (Nil [Sll]) [Sll]) [Sll]) [Sll]);
-- %test "isAnagram1" Bool: isAnagram (Cons 1 (Cons 2 (Cons 2 (Nil [Sll]) [Sll]) [Sll]) [Sll]);

