%generate leftList

Sll : layout[-x](List);
Sll Nil := emp;
Sll (Cons head tail) :=
  exists +nxt.
  x :-> head **
  (x+1) :-> nxt **
  Sll tail [nxt];

TreeLayout : layout[-x](Tree);
TreeLayout Leaf := emp;
TreeLayout (Node payload left right) :=
  exists +p, +q.
  x :-> payload **
  (x+1) :-> p **
  (x+2) :-> q **
  TreeLayout left [p] **
  TreeLayout right [q];

leftList : TreeLayout -> Sll;
leftList Leaf := Nil [Sll];
leftList (Node a b c) :=
  Cons a (leftList b) [Sll];

-- %test "leftList" Sll: leftList (Node 1 (Node 2 (Leaf [TreeLayout]) (Leaf [TreeLayout]) [TreeLayout]) (Leaf [TreeLayout]) [TreeLayout]);
%test "leftList" Sll: leftList (Node 1 (Node 2 (Leaf [TreeLayout]) (Leaf [TreeLayout]) [TreeLayout]) (Node 3 (Leaf [TreeLayout]) (Leaf [TreeLayout]) [TreeLayout]) [TreeLayout]);

