data List := Nil | Cons Int List;

Sll : layout[-x](List);
Sll Nil := emp;
Sll (Cons h t) :=
  x :-> h **
  (x+1) :-> nxt **
  Sll [nxt] t;

Array : layout[-x](List);
Array Nil := emp;
Array (Cons h t) :=
  x :-> h **
  Array [x+1] t;

index : (a :~ List) => a -> Int -> Int;
index (Cons head tail) n
  | n == 0 := head
  | not (n == 0) := index tail (n-1);

last : (a :~ List) => a -> Int;
last (Cons head Nil) := head;
last (Cons head tail) := last tail;

fibList : (a :~ List) => Int -> a;
fibList 0 := Cons 1 Nil;
fibList 1 := Cons 1 (Cons 1 Nil);
fibList n := 
  let xs := fibList (n-1)
      nextFib := index xs (n-1) + index xs (n-2)
  in
  Cons nextFib xs;

fibListUntil_helper : (a :~ List) => Int -> Int -> a;
fibListUntil_helper end curr
  | curr == 0 := Cons 1 Nil;
  | curr == 1 := Cons 1 (Cons 1 Nil);
  | otherwise :=
      let xs := fibList (n-1)
          nextFib := index xs (n-1) + index xs (n-2)
      in
      if nextFib > end
        then Nil
        else Cons nextFib xs;

fibListUntil : (a :~ List) => Int -> a;
fibListUntil n := fibListUntil_helper n 0;

fib : (a :~ List) => Int -> Int;
fib [a] n = last (fibList [a] n);

fibSll : Int -> Int;
fibSll n := fib [Sll] n;

fibArray : Int -> Int;
fibArray n := fib [Array[[x,n]]] n;

-- Precondition: List must be sorted in increasing order
searchRange : (a :~ List) => Int -> Int -> Int -> a -> Bool;
searchRange start end item list :=
  let i := (end - start) / 2
  in
  if start >= end
    then False
    else if index list i == item
           then True
           else -- search start i || search i end
            -- NOTE: Manually doing a short-circuited or:
            if searchRange start i
              then True
              else if searchRange i end
                     then True
                     else False;
  

search : (a :~ List) => Int -> a -> Bool;
search item xs := searchRange 0 (length xs - 1) item xs;

linearSearch : (a :~ List) => Int -> a -> Bool;
linearSearch item Nil := False;
linearSearch item (Cons head tail) :=
  if head == item
    then True
    else linearSearch item tail;

isFib : (a :~ List) => Int -> Bool;
isFib [a] n := linearSearch n (fibListUtil [a] (n+1));

-- Build the Fibonacci list as a singly-linked list, then convert it into
-- an array for faster random access and search
isFib_converted : Int -> Bool;
isFib_converted n :=
  let fibs := fibListUntil [Sll] (n+1)
      fibsConverted := convert [Sll] [Array[[x, n+1]]] fibs
  in
  linearSearch n fibsConverted;

