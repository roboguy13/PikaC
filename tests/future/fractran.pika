-- John Conway's programming language FRACTRAN
-- Note: This language is Turing-complete

data Fraction := MkFraction Int Int;
data Program := Empty | Seq Fraction Program;
data Output := Done Int State | Step Int Output;

data State := NoUpdate | Updated;

stepFraction : Int -> Fraction -> Int;
stepFraction i (MkFraction n d)
  | (i * n) % d == 0       := (i * n) / d
  | not ((i * n) % d == 0) := i;

step : Int -> Program -> State -> Output;
step i _     NoUpdate := Done i NoUpdate;
step i Empty state    := Done i state;
step i (Seq h t) state :=
  let j := stepFraction i h
  in
  if j == i
    then step i t state
    else Step i (step j t Updated);

iterateWhileUpdated : Output -> Program -> Output;
iterateWhileUpdated (Done i NoUpdate) _ := Done i NoUpdate;
iterateWhileUpdated (Done i Updated)  p := iterateWhileUpdated (step i p NoUpdate) p;
iterateWhileUpdated (Step i rest)     p := Step i (iterateWhileUpdated rest p);

run : Int -> Program -> Output;
run i p := iterateWhileUpdated (step i p NoUpdate) p;

