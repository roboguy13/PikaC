data Tree := Empty | Node Int Tree Tree;

SlowTree : layout[-x](Tree);
SlowTree Empty := emp;
SlowTree (Node i p q) :=
  x :-> i **
  (x+1) :-> left **
  (x+2) :-> right **
  SlowTree [left, z] p **
  SlowTree [right, w] q;

PackedTree : synthlayout(SlowTree);
PackedTree [x, sz] Empty := sz == 0 ,, emp;
PackedTree [x, sz] (Node i a b) :=
  sz == 1 + sz1 + sz2
    ,,
  x :-> i **
  PackedTree [x + 2, sz1] a **
  PackedTree [x + 2*(1 + sz1), sz2] b;

leaf : (a :~ Tree) => Int -> a
leaf x := Node x Empty Empty;

label : (a :~ Tree) => a -> Int
label (Node i _ _) := i;

node : (a :~ Tree) => a -> a -> a;
node l r := Node (label l + label r) l r;

fibTree : (a :~ Tree) => Int -> a;
fibTree n
  | n == 0 := leaf 0
  | n == 1 := Node 1 (leaf 0) Empty
  | otherwise :=
      let t@(Node _ left _) := fibTree (n-1)
      in
      node t left;

-- NOTE: 'a' is actually not used in the main part of the type. But it is
-- used in the body of the function. It is used to tell fibTree which
-- layout to use for its tree.
fib : (a :~ Tree) => Int -> Int;
fib [a] n := label (fibTree [a] n);

fibSlowTree : Int -> Int;
fibSlowTree = fib [SlowTree];

fibPackedTree : Int -> Int;
fibPackedTree = fib [PackedTree];

